!!テクスチャ 2D

$$Texture$$ により、$$Mesh$$、$$Particle$$ やインターフェースがより活気付きます。 これらは重ねたり、オブジェクト周辺にラップする画像やムービー ファイルになります。 これらは非常に重要であるため、多くのプロパティを有しています。 初めてこれをレンダリングする場合は、[[#details | Details]] に移動し、参照が必要な場合は、実際の設定に戻ります。

オブジェクトに使用するシェーダが必要なテクスチャに関する要件を追加しますが、画像ファイルをプロジェクト内に置くことができるということが基本的な原理です。 サイズ要件 (以下に記載) を満たすと、インポートされ、ゲームでの使用向けに最適化されます。  これにより、マルチ レイヤー Photoshop または TIFF ファイルに拡張され、インポート時に平坦化されるため、ゲームに対するサイズのペナルティはありません。


!! プロパティ

$$Texture Inspector$$ は、その他ほとんどのものと見た目が若干ことなります。 \\
Attach:TexImporterFull40.png

上の部分には幾つかの設定が、下の部分には、$$Texture Importer$$ とテクスチャ プレビューが含まれます。

!! テクスチャ インポータ

テクスチャはすべて $$Project Folder$$ 内の画像からきます。 どのようにインポートされるかは、$$Texture Importer$$ によって指定されます。 $$Project View$$ でファイル テクスチャを選択し、$$Inspector$$ で $$Import Settings$$ を編集することで、テクスチャを変更します。

インスペクタの最上位にあるアイテムが^^Texture Type^^ メニューでありソース画像ファイルから作成するテクスチャのタイプを選択できます。

||PROPS
||``Texture Type`` ||テクスチャの目的に応じて、これを選択して、基本的なパラメータを設定できます。 ||
||>>>``Texture`` ||一般に、すべてのテクスチャに使用できる最も一般的な設定です。 ||
||>>>``Normal Map`` ||これを選択すると、色をリアルタイムの通常マッピングに適した形式に変換させます。 詳細については、下の [[#normalmaps|Normal Maps]] を参照してください。||
||>>>``GUI`` ||テクスチャを HUD/GUI Control で使用する場合にこれを使用します。 ||
||>>>``Reflection`` ||別名キューブ マップ。テクスチャ上での反射を作成するのに使用します。詳細については、[[class-Cubemap|Cubemap Textures]] を参照してください。||
||>>>``Cookie`` ||ライトの Cookie に使用する基本パラメータでテキスチャを設定します。||
||>>>``Advanced`` ||テクスチャに特定のパラメータを設定し、テクスチャを完全に制御したい場合にこれを選択します。 ||

Attach:TexImporterTexture40.png\\
「選択された基本テクスチャ設定」

||``Alpha From Grayscale``||有効にすると、アルファ透過チャンネルが画像の既存の明るさと暗さの値で生成されます。||
||``Wrap Mode`` ||テクスチャをタイルしたときの処理 ||
||>>>``Repeat`` ||テクスチャを繰り返しタイル ||
||>>>``Clamp`` ||テクスチャの端をストレッチ||
||``Filter Mode`` ||テクスチャが3Dへの変換によりストレッチされたときのフィルタ処理を選択 ||
||>>>``Point`` ||テクスチャを近くでみたときにブロック状になります ||
||>>>``Bilinear`` ||テクスチャを近くでみたときにぼやけます ||
||>>>``Trilinear`` ||Bilinearと同じですが、テクスチャはミップマップ間でもぼやけます ||
||``Aniso Level`` ||急な角度から眺めたときのテクスチャ品質を向上させます。床や地面のテクスチャに良い。 [[#anisotropy | 以下]] を参照して下さい。||

Attach:TexImporterNormalMap40.png\\
テクスチャインポータの法線マッピング設定

||``Create from Greyscale`` ||オンにした場合Bumpiness、Filteringオプションが表示されます||
||``Bumpiness`` ||バンプの強度を制御します||
||``Filtering`` ||バンプの強度を計算する方法を決定します||
||>>>``Smooth`` ||スムーズな法線マップを生成します||
||>>>``Sharp`` ||ゾーベルフィルタとしても知られています。標準よりもシャープな法線マップを生成します。||
||``Wrap Mode`` ||テクスチャをタイルしたときの処理 ||
||>>>``Repeat`` ||テクスチャを繰り返しタイル ||
||>>>``Clamp`` ||テクスチャの端をストレッチ||
||``Filter Mode`` ||テクスチャが3Dへの変換によりストレッチされたときのフィルタ処理を選択 ||
||>>>``Point`` ||テクスチャを近くでみたときにブロック状になります ||
||>>>``Bilinear`` ||テクスチャを近くでみたときにぼやけます ||
||>>>``Trilinear`` ||Bilinearと同じですが、テクスチャはミップマップ間でもぼやけます ||
||``Aniso Level`` ||急な角度から眺めたときのテクスチャ品質を向上させます。床や地面のテクスチャに良い。 [[#anisotropy | 以下]] を参照して下さい。||

Attach:TexImporterGUI40.png\\
「テクスチャ インポータの GUI 設定」

||``Filter Mode`` ||テクスチャが3Dへの変換によりストレッチされたときのフィルタ処理を選択 ||
||>>>``Point`` ||テクスチャを近くでみたときにブロック状になります ||
||>>>``Bilinear`` ||テクスチャを近くでみたときにぼやけます ||
||>>>``Trilinear`` ||Bilinearと同じですが、テクスチャはミップマップ間でもぼやけます ||

Attach:TexImporterCursor40.png\\
テクスチャインポータのCursor設定

||``Wrap Mode`` ||テクスチャをタイルしたときの処理 ||
||>>>``Repeat`` ||テクスチャを繰り返しタイル ||
||>>>``Clamp`` ||テクスチャの端をストレッチ||
||``Filter Mode`` ||テクスチャが3Dへの変換によりストレッチされたときのフィルタ処理を選択 ||
||>>>``Point`` ||テクスチャを近くでみたときにブロック状になります ||
||>>>``Bilinear`` ||テクスチャを近くでみたときにぼやけます ||
||>>>``Trilinear`` ||Bilinearと同じですが、テクスチャはミップマップ間でもぼやけます ||

Attach:TexImporterReflection40.png\\
「テクスチャ インポータの反射設定」

||``Mapping`` ||これにより、テクスチャがキューブ マップにどのようにマッピングされるかが決まります。 ||
||>>>``Sphere Mapped`` ||「球体状」のキューブ マップにテクスチャをマッピングします。||
||>>>``Cylindrical`` ||テクスチャを円柱にマッピングします。円柱のようなオブジェクトに反射を使用したい場合に使用します。||
||>>>``Simple Sphere`` ||テクスチャを簡単な球体にマッピングし、回転する際に反射を変形させます。 ||
||>>>``Nice Sphere`` ||テクスチャを球体にマッピングし、回転時に変形させますが、テクスチャのラップは確認できます。||
||>>>``6 Frames Layout`` ||テクスチャは立方体の六つの面にキューブマップのレイアウトを展開し、十字架の形か、列順の画像（ +x -x +y -y +z -z）をさらに縦か横か選択できます||
||``Fixup edge seams`` ||（ポイントライトのみ）光沢の強い反射光のある画像イメージのエッジのつなぎ目の画像乱れを取り除きます ||
||``Filter Mode`` ||テクスチャが3Dへの変換によりストレッチされたときのフィルタ処理を選択 ||
||>>>``Point`` ||テクスチャを近くでみたときにブロック状になります ||
||>>>``Bilinear`` ||テクスチャを近くでみたときにぼやけます ||
||>>>``Trilinear`` ||Bilinearと同じですが、テクスチャはミップマップ間でもぼやけます ||
||``Aniso Level`` ||急な角度から眺めたときのテクスチャ品質を向上させます。床や地面のテクスチャに良い。 [[#anisotropy | 以下]] を参照して下さい。||

制御するのにグレースケール テクスチャを使用する方法です。 これは、移動する雲の作成や、密集する葉の印象を与えるのに便利です。 [[class-Light|Light]] ページにこれに関する詳細が全て記載されていますが、テクスチャを使用可能にするには、^^Texture Type^^ を「Cookie」に設定する必要があります。

Attach:TexImporterCookie40.png\\
「テクスチャ インポータの Cookie 設定」

||``Light Type`` ||テクスはが適用されるライトの種類。 (スポット ライト、ポイント ライト、ディクショナリ ライトが該当します)。 ディクショナリ ライトの場合、このテクスチャはタイルになるため、テクスチャ インスペクタでは、適切な効果を得るには、スポット ライトに対して、エッジ モードを「Repeat」に設定し、クッキーテクスチャのエッジを黒一色のままにしておく必要があります。 テクスチャ インスペクタで、エッジ モードを「Clamp」に設定する必要があります。||
||``Mapping`` ||これにより、テクスチャがキューブ マップにどのようにマッピングされるかが決まります。 ||
||>>>``Sphere Mapped`` ||「球体状」のキューブ マップにテクスチャをマッピングします。||
||>>>``Cylindrical`` ||テクスチャを円柱にマッピングします。円柱のようなオブジェクトに反射を使用したい場合に使用します。||
||>>>``Simple Sphere`` ||テクスチャを簡単な球体にマッピングし、回転する際に反射を変形させます。 ||
||>>>``Nice Sphere`` ||テクスチャを球体にマッピングし、回転時に変形させますが、テクスチャのラップは確認できます。||
||>>>``6 Frames Layout`` ||テクスチャは立方体の六つの面にキューブマップのレイアウトを展開し、十字架の形か、列順の画像（ +x -x +y -y +z -z）をさらに縦か横か選択できます||
||``Fixup edge seams`` ||（ポイントライトのみ）光沢の強い反射光のある画像イメージのエッジのつなぎ目の画像乱れを取り除きます ||
||``Alpha From Greyscale``||有効にすると、アルファ透過チャンネルが画像の既存の明るさと暗さの値で生成されます。||

Attach:TexImporterLightmap40.png\\
「テクスチャインポータでのライトマップ設定」

||``Filter Mode`` ||テクスチャが3Dへの変換によりストレッチされたときのフィルタ処理を選択 ||
||>>>``Point`` ||テクスチャを近くでみたときにブロック状になります ||
||>>>``Bilinear`` ||テクスチャを近くでみたときにぼやけます ||
||>>>``Trilinear`` ||Bilinearと同じですが、テクスチャはミップマップ間でもぼやけます ||
||``Aniso Level`` ||急な角度から眺めたときのテクスチャ品質を向上させます。床や地面のテクスチャに良い。 [[#anisotropy | 以下]] を参照して下さい。||

Attach:TexImporterAdvanced40.png\\
「詳細テクスチャ インポータ設定ダイアログ」


||``Non Power of 2`` |テクスチャが 2 のべき乗サイズでない場合、これにより、インポート時のスケーリング動作が定義されます (詳細については、下記の　[[#texturesizes|Texture Sizes]] を参照)。||
||>>>``None`` ||GUITexture コンポーネントでと併用するのに、テクスチャが次のより大きい2 のべき乗サイズに追加されます。 ||
||>>>``To nearest`` ||テクスチャがインポート時に最も近い 2 のべき乗に縮小拡大されます。 例えば、257x511 のテクスチャは、256x512 になります。 PVRTC 形式には、テクスチャを正方形 (幅と高さが等しい) にする必要があるため、最終的なサイズは 512x512 に拡大されます。 ||
||>>>``To larger`` ||テクスチャがインポート時に次に大きい 2 のべき乗に縮小拡大されます。 例えば、257x511 のテクスチャは、512x512 になります。 ||
||>>>``To smaller`` ||テクスチャがインポート時に次に小さい 2 のべき乗に縮小拡大されます。 例えば、257x511 のテクスチャは、256x256 になります。 ||
||``Generate Cube Map`` ||各種生成方法を使用して、テクスチャからキューブ マップを生成します。 ||
||>>>``Spheremap`` ||テクスチャを球状のキューブマップにマッピング||
||>>>``Cylindrical`` ||テクスチャを円柱にマッピング。オブジェクトの反射光を円柱状にしたい場合に使用||
||>>>``SimpleSpheremap`` ||テクスチャをシンプルな球にマッピング、回転のときには反射光は崩れます ||
||>>>``NiceSpheremap`` ||テクスチャを球にマッピング、回転のときには反射光は崩れますがテクスチャはラッピングします||
||>>>``FacesVertical`` ||テクスチャは立方体の六つの面を縦に展開し順序は +x -x +y -y +z -z ||
||>>>``FacesHorizontal`` ||テクスチャは立方体の六つの面を横に展開し順序は  +x -x +y -y +z -z ||
||>>>``CrossVertical`` ||テクスチャは立方体の六つの面を縦長の十字架として展開||
||>>>``CrossHorizontal`` ||テクスチャは立方体の六つの面を横長の十字架として展開 ||
||``Read/Write Enabled`` ||これを選択すると、スクリプトからテクスチャ データにアクセスできます (GetPixels、SetPixels と その他の [[ScriptRef:Texture2D.html|Texture2D]] 機能)。 しかし、テクスチャデータのコピーが作成され、テクスチャ アセットに必要なメモリ量を 2　倍にします。 本当に必要な場合にのみ使用してください。 非圧縮および DTX　圧縮テクスチャにのみ有効であり、その他の圧縮テクスチャから読み取ることはできません。 デフォルトでは、無効になっています。 ||
||``Import Type`` ||画像データの処理方法||
||>>>``Default`` ||標準的なテクスチャ ||
||>>>``Normal Map`` ||テクスチャを法線マップとして処理（他のオプションを有効にします）||
||>>>``Lightmap`` ||テクスチャをライトマップとして処理（他のオプションを無効にします）||
||``Alpha from grayscale`` ||（Defaultのみ）画像の明度情報からアルファチャンネルを生成 ||
||``Create from grayscale`` ||（Normal Mapのみ）画像の明度からマップを生成 ||
||``Bypass sRGB sampling`` ||（Defaultのみ）ガンマ情報を考慮せず、画像の色をそのまま使用（テクスチャがGUIや画像データ以外をエンコードする際に便利） ||
||``Generate Mip Maps`` ||これを選択すると、ミニ マップの生成が有効になります。 ミニ マップはより小さいテクスチャで、テクスチャが画面上で非常に小さい場合に使用されます。 詳細については、下の [[#mipmaps|Mip Maps]] を参照してください。||
||``In Linear Space`` ||ミップマップをリニアカラー空間で生成する ||
||``Border Mip Maps`` ||これを選択すると、色が下位のミップ レベルの端ににじみ出ることがなくなります。 ライト Cookie (下記参照) に使用されます。 ||
||``Mip Map Filtering`` ||画質を最適化できるミップ マップ フィルタリングには次の 2 つの方法があります。 ||
||>>>``Box`` ||ミップ マップをフェードアウトする最も簡単な方法。ミップ レベルは、サイズが小さくなるに連れ、より滑らかになります。 ||
||>>>``Kaiser`` ||鋭角化カイザー アルゴリズムは、サイズが小さくなるに連れ、ミップ マップで実行されます。 テクスチャが遠くでぼやけが多すぎる場合、このオプションを試してください。 ||
||``Fade Out Mips`` ||ミップ レベルが上がるに連れ、ミップ マップをグレーにフェードするのに、これを有効にします。 これは、詳細マップに使用されます。 一番左のスクロールは、フェードアウトを始める最初のミップ レベルです。 一番右のスクロールは、テクスチャが完全にグレーアウトするミップレベルを定義します。
||``Wrap Mode`` ||テクスチャをタイルしたときの処理 ||
||>>>``Repeat`` ||テクスチャを繰り返しタイル ||
||>>>``Clamp`` ||テクスチャの端をストレッチ||
||``Filter Mode`` ||テクスチャが3Dへの変換によりストレッチされたときのフィルタ処理を選択 ||
||>>>``Point`` ||テクスチャを近くでみたときにブロック状になります ||
||>>>``Bilinear`` ||テクスチャを近くでみたときにぼやけます ||
||>>>``Trilinear`` ||Bilinearと同じですが、テクスチャはミップマップ間でもぼやけます ||
||``Aniso Level`` ||急な角度から眺めたときのテクスチャ品質を向上させます。床や地面のテクスチャに良い。 [[#anisotropy | 以下]] を参照して下さい。||


!! プラットフォームごとの無効化

異なるプラットフォームを作成する場合、対象のプラットフォームに対するテクスチャの解像度やサイズ、画質を考慮する必要があります。 これらのオプションをデフォルト設定にしつつ、特定のプラットフォームで特定の値を割当てることができます。

Attach:TextureImporterOverride.png\\
「すべてのプラットフォーム用のデフォルト設定」
||``Max Texture Size`` ||インポートされたテクスチャの最大サイズ。 アーティストは、大きなテクスチャを扱いたい場合が多くあります。これで、テクスチャを適切なサイズに縮小します。 ||
||``Texture Format`` ||テクスチャに対して使用される内部表示。 サイズと画質間でのトレードオフとなります。 下記の例では、256 x 256 ピクセルのゲーム内テクスチャの最終サイズを示しています。||
||>>>``Compressed`` ||圧縮された RGB テクスチャ。 これは、デフューズ テクスチャの最も一般的な形式になります。 ピクセルあたり 4 ビット (256x256 テクスチャの場合は、32 KB)。 ||
||>>>``16 bit`` ||低画質 True Color。 16 段階の赤、緑、青、アルファがあります。 ||
||>>>``Truecolor`` ||Truecolor、最高画質になります。 256x256 テクスチャの場合は、256 KB。 ||

^^Texture Type^^ を ^^Advanced^^ に設定している場合、^^Texture Format^^ は異なる値になります。


!!デスクトップ
>>desktop<<
||``Texture Format`` ||テクスチャに対して使用される内部表示。 サイズと画質間でのトレードオフとなります。 下記の例では、256 x 256 ピクセルのゲーム内テクスチャの最終サイズを示しています。||
||>>>``RGB Compressed DXT1`` ||圧縮された RGB テクスチャ。 これは、デフューズ テクスチャの最も一般的な形式になります。 ピクセルあたり 4 ビット (256x256 テクスチャの場合は、32 KB)。 ||
||>>>``RGBA Compressed DXT5`` ||圧縮された RGBA テクスチャ。 これは、デフューズおよびスペキュラ制御テクスチャに使用される主な形式になります。 1 バイト/ピクセル (256x256 テクスチャの場合は、64 KB)。 ||
||>>>``RGB 16 bit`` ||アルファなしの 65,000 色。 圧縮 DXT　形式は、メモリをあまり使用せず、通常は見た目もよくなります。 256x256 テクスチャの場合は、128 KB。 ||
||>>>``RGB 24 bit`` ||アルファなしの TrueColor。 256x256 テクスチャの場合は、192 KB。 ||
||>>>``Alpha 8 bit`` ||色なしの高画質アルファ チャンネル。 256x256 テクスチャの場合は、64 KB。 ||
||>>>``RGBA 16 bit`` ||低画質 True Color。 16 段階の赤、緑、青、アルファがあります。 圧縮 DXT　形式は、メモリをあまり使用せず、通常は見た目もよくなります。 256x256 テクスチャの場合は、128 KB。 ||
||>>>``RGBA 32 bit`` ||アルファのある Truecolor。最高画質になります。 256x256 テクスチャの場合は、256 KBで、費用がかかります。 ほとんどの場合、__DXT5__は、はるかに小さいサイズで十分な画質を提供します。 DXT 圧縮は目に見える画質損失を生じるため、これは主に法線マップに使用します。 ||
>><<
!!iOS
>>ios<<
||``Texture Format`` ||テクスチャに対して使用される内部表示。 サイズと画質間でのトレードオフとなります。 下記の例では、256 x 256 ピクセルのゲーム内テクスチャの最終サイズを示しています。||
||>>>``RGB Compressed PVRTC 4 bits`` ||圧縮された RGB テクスチャ。 これは、デフューズ テクスチャの最も一般的な形式になります。 ピクセルあたり 4 ビット (256x256 テクスチャの場合は、32 KB)。||
||>>>``RGBA Compressed PVRTC 4 bits`` ||圧縮された RGBA テクスチャ。 これは、透明性のあるデフューズおよびスペキュラ制御テクスチャに使用される主な形式になります。 ピクセルあたり 4 ビット (256x256 テクスチャの場合は、32 KB)。||
||>>>``RGB Compressed PVRTC 2 bits`` ||圧縮された RGB テクスチャ。 デフューズ テクスチャに適したより低い画質形式。 ピクセルあたり 2 ビット (256x256 テクスチャの場合は、16 KB)。||
||>>>``RGBA Compressed PVRTC 2 bits`` ||圧縮された RGBA テクスチャ。 デフューズおよびスペキュラ コントロール テクスチャに適したより低い画質形式。 ピクセルあたり 2 ビット (256x256 テクスチャの場合は、16 KB)。||
||>>>``RGB Compressed DXT1`` ||圧縮された RGB テクスチャ。 この形式は iOS ではサポートされていませんが、デスクトップとの下位互換性に対して維持されます。 ||
||>>>``RGBA Compressed DXT5`` ||圧縮された RGBA テクスチャ。 この形式は iOS ではサポートされていませんが、デスクトップとの下位互換性に対して維持されます。 ||
||>>>``RGB 16 bit`` ||アルファなしの 65,000 色。 PVRTC 形式よりも多くのメモリを使用しますが、UI または階調度のないクリスプ テクスチャにより適している場合があります。 256x256 テクスチャの場合は、128 KB。 ||
||>>>``RGB 24 bit`` ||アルファなしの TrueColor。 256x256 テクスチャの場合は、192 KB。 ||
||>>>``Alpha 8 bit`` ||色なしの高画質アルファ チャンネル。 256x256 テクスチャの場合は、64 KB。 ||
||>>>``RGBA 16 bit`` ||低画質 True Color。 16 段階の赤、緑、青、アルファがあります。 PVRTC 形式よりも多くのメモリを使用しますが、正確なアルファ チャンネルが必要な場合に便利な場合があります。 256x256 テクスチャの場合は、128 KB。 ||
||>>>``RGBA 32 bit`` ||アルファのある Truecolor。最高画質になります。 256x256 テクスチャの場合は、256 KBで、費用がかかります。 ほとんどの場合、__PVRTC__は、はるかに小さいサイズで十分な画質を提供します。 ||
||``Compression quality`` ||Fastで高パフォーマンス、Bestで高画質、Normalでふたつのバランスをとります
>><<
!Android!
>>android<<
||``Texture Format`` ||テクスチャに対して使用される内部表示。 サイズと画質間でのトレードオフとなります。 下記の例では、256 x 256 ピクセルのゲーム内テクスチャの最終サイズを示しています。||
||>>>``RGB Compressed DXT1`` ||圧縮された RGB テクスチャ。 Nvidia Tegra でサポートされています。 ピクセルあたり 4 ビット (256x256 テクスチャの場合は、32 KB)。 ||
||>>>``RGBA Compressed DXT5`` ||圧縮された RGBA テクスチャ。 Nvidia Tegra でサポートされています。 ピクセルあたり 6 ビット (256x256 テクスチャの場合は、64 KB)。 ||
||>>>``RGB Compressed ETC 4 bits`` ||圧縮された RGB テクスチャ。 これは、Android プロジェクトのデフォルトのテクスチャ形式になります。 ETC1 は、OpenGL ES 2.0 の一部で、すべての OpenGL ES 2.0 GPU でサポートされています。 アルファはサポートしていません。 ピクセルあたり 4 ビット (256x256 テクスチャの場合は、32 KB)。||
||>>>``RGB Compressed PVRTC 2 bits`` ||圧縮された RGB テクスチャ。 Imagination PowerVR GPU でサポートされています。 ピクセルあたり 2 ビット (256x256 テクスチャの場合は、16 KB)。||
||>>>``RGBA Compressed PVRTC 2 bits`` ||圧縮された RGBA テクスチャ。 Imagination PowerVR GPU でサポートされています。 ピクセルあたり 2 ビット (256x256 テクスチャの場合は、16 KB)。||
||>>>``RGB Compressed PVRTC 4 bits`` ||圧縮された RGB テクスチャ。 Imagination PowerVR GPU でサポートされています。 ピクセルあたり 4 ビット (256x256 テクスチャの場合は、32 KB)。||
||>>>``RGBA Compressed PVRTC 4 bits`` ||圧縮された RGBA テクスチャ。 Imagination PowerVR GPU でサポートされています。 ピクセルあたり 4 ビット (256x256 テクスチャの場合は、32 KB)。||
||>>>``RGB Compressed ATC 4 bits`` ||圧縮された RGB テクスチャ。 Qualcomm Snapdragon でサポートされています。 ピクセルあたり 4 ビット (256x256 テクスチャの場合は、32 KB)。 ||
||>>>``RGBA Compressed ATC 8 bits`` ||圧縮された RGBA テクスチャ。 Qualcomm Snapdragon でサポートされています。 ピクセルあたり 6 ビット (256x256 テクスチャの場合は、64 KB)。 ||
||>>>``RGB 16 bit`` ||アルファなしの 65,000 色。 圧縮形式よりも多くのメモリを使用しますが、UI または階調度のないクリスプ テクスチャにより適している場合があります。 256x256 テクスチャの場合は、128 KB。 ||
||>>>``RGB 24 bit`` ||アルファなしの TrueColor。 256x256 テクスチャの場合は、192 KB。 ||
||>>>``Alpha 8 bit`` ||色なしの高画質アルファ チャンネル。 256x256 テクスチャの場合は、64 KB。 ||
||>>>``RGBA 16 bit`` ||低画質 True Color。 アルファ チャンネルのあるテクスチャに対するデフォルトの圧縮。 256x256 テクスチャの場合は、128 KB。 ||
||>>>``RGBA 32 bit`` ||アルファのある Truecolor。アルファのあるテクスチャに対する最高画質圧縮になります。 256x256 テクスチャの場合は、256 KB。 |
||``Compression quality`` ||Fastで高パフォーマンス、Bestで高画質、Normalでふたつのバランスをとります

Tegra など特定のハードウェアを対象としていない場合、ETC1 圧縮の使用をお勧めします。 必要な場合、外部のアルファ チャンネルを格納し、より低いテクスチャ フットプリントからメリットが得られます。
テクスチャにアルファ チャンネルを本当に格納したい場合、RGBA16 ビットは、すべてのハードウェア ベンダーが対応している圧縮方法になります。

アプリケーションがサポートされていないテクスチャ圧縮を使用する場合、テクスチャは、RGBA 32 に解凍され、圧縮テクスチャと共にメモリに格納されます。
この場合、テクスチャの解凍に無駄な時間を使い、2 回格納することでメモリも無駄になります。 これはまた、レンダリング パフォーマンスに大きな悪影響を及ぼす場合があります。
>><<
!Flash
||``Format`` ||Image format ||
||>>>``RGB JPG Compressed`` ||RGB image data compressed in JPG format ||
||>>>``RGBA JPG Compressed`` ||RGBA image data (ie, with alpha) compressed in JPG format ||
||>>>``RGB 24-bit`` ||Uncompressed RGB image data, 8 bits per channel ||
||>>>``RGBA 32-bit`` ||Uncompressed RGBA image data, 8 bits per channel ||

[[#details]]
!! 詳細


!!! 対応形式
Unity は、次の画像ファイル形式をサポートしています。 PSD、TIFF、JPG、TGA、PNG、GIF、BMP、IFF、PICT。 Unity はマルチ レイヤー PSD & TIFF ファイルを適切にインポートできます。 これらはインポート時に自動的に平坦化されますが、レイヤーは、それ自体アセットに維持されるため。これらのファイルタイプをネイティブに使用する際も作業が無駄になることはありません。 これは、Photoshop から使用できるテクスチャのコピーの １ つを 3D モデリング アプリケーションから Unity に作成できるので重要です。


[[#texturesizes]]
!!! テクスチャ サイズ

理想的には、テクスチャは両側が 2 のべき乗になります。 これらのサイズは次のようになります。 2、4、8、16、32、64、128、256、512、1024 または 2048 ピクセル。 テクスチャは正方形である必要はありません。つまる、幅と高さは異なっていても構いません。

Unity では別のテクスチャ サイズ (2 のべき乗以外) を使用することができます。 2 のべき乗以外のテクスチャ サイズは、[[class-GuiTexture|GUI Textures]] で使用されるのがベストですが、他で使用される場合は、非圧縮の RGBA 32 ビット形式に変換されます。 つまり、このテクスチャ サイズは、ビデオ メモリ (PVRT (iOS)/DXT (デスクトップ) 圧縮テクスチャ) を使用するため、ロードやレンダリングにより時間がかかります (iOS モード時)。 一般に、2 のべき乗以外のサイズは GUI 目的にのみ使用します。

2 のべき乗以外のテクスチャ アセット、インポート設定に詳細テクスチャ タイプの「Non Power of 2」オプションを使用して、インポート時に拡大できます。 Unity は、要求に応じて、テクスチャの内容を縮小拡大し、ゲーム内では、このテクスチャの内容は他のテクスチャ同様動作するため、圧縮でき、非常に高速でロードされます。

2 のべき乗以外のテクスチャの潜在的な問題として、Unityが内部処理で2のべき乗のテクスチャに変換し、ストレッチ処理がわずかな画像の乱れを引き起こすことがあります。  

!!! UV マッピング

3D モデルに 2D テクスチャをマッピングすると、ある種のラッピングが行われます。 これは、$$UV mapping$$ と呼ばれ、3D モデリング アプリケーションで行われます。 Unity 内で、[[class-Material|Materials]] を使用して、テクスチャをスケールおよび移動させることができます。 法線および詳細マップのスケーリングは特に便利です。


[[#mipmaps]]
!!! ミップ マップ

ミップ マップは、徐々に縮小していく画像で、リアルタイムの 3D エンジンでのパフォーマンを最適化するのに使用されます。 カメラから遠くにあるオブジェクトは、より小さいテクスチャを使用します。 ミップ マップを使用することで、33% のメモリしか使用しませんが、使用しないと、大きなパフォーマンス損失が生じます。 必ずゲーム内のテクスチャにミップ マップを使用した方がよいでしょう。小型化されないテクスチャの場合が唯一の例外です。


[[#normalmaps]]
!!! 法線マップ

法線マップは、ポリゴンの少ないモデルをより多くの細部を持っているように見せる場合に法線マップ シェーダがあるように見せる場合にに使用されます。 Unity は、RGB 画像として符号化された法線マップを使用します。 グレースケールの高さマップ画像から法線マップを生成するオプションもあります。


!!! 詳細マップ

地形を作成したい場合は、通常、メイン テクスチャを使用して、くさや岩、砂などのエリアがどこにあるかを示します。 地形が適切なサイズの場合、最終的にぼやけてしまいます。 メイン テクスチャが近づくに連れ、[[HOWTO-UseDetailTexture|Detail textures]] は、細かい細部をフェードインすることでこの事実を隠します。

詳細テクスチャを描画時に、ニュートラルのグレーが非表示になり、白がメイン テクスチャを 2 倍明るく、黒がメイン テクスチャを完全な黒に見せます。


!!! 反射 (キューブ マップ)

反射マップにテクスチャを使用したい場合 (例：「Reflective」組み込みシェーダを使用)、[[class-Cubemap|Cubemap Textures]] を使用する必要があります。

[[#anisotropy]]
!!! 異方性フィルタリング

異方性フィルタリングは、グレージング角から表示された時に、レンダリング費用をある程度犠牲にして画質を向上します (この費用は全体的にグラフィック カードに依存します)。 異方性レベルを上げるのは通常、地面および床テクスチャにとってよいアイディアです。 [[class-QualitySettings | Quality Settings]] では、異方性フィルタリングは、すべてのテクスチャに強制的に実行できるか、全体的に無効にできます。

Attach:AnisotropicComparison.png \\
「地面テクスチャに使用される非異方性 (左)/最大異方性(右)」