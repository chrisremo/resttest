! 頂点シェーダとFragmentシェーダのプログラミング

$$ShaderLab$$ は単なるハードウェアシェーダー以上の機能を含みます。たくさんのことができます。まず、Properties(プロパティ:属性)はマテリアルのインスペクターに表示するものや、違うグラフィックスハードで動けるように複数のシェーダを含んだり、ハードが用意した固定関数を調整したり、などなどです。実際のプログラマブルシェーダ（頂点シェーダーやFragmentシェーダのプログラムのような）はShaderLabのシェーダのコンセプトの単なる一部です。[[ShaderTut2 | shader tutorial]] で基本的な説明をします。 ここではローレベルなハードに近いシェーダを $$shader programs$$と呼ぶことにします。

__もしライティングに反応するシェーダを書きたいなら、 [[SL-SurfaceShaders | Surface Shaders]] ドキュメントを読んで下さい。__ ここでは、Unityのライトで反応しないシェーダについて言及します。（例：スペシャルエフェクト、[[comp-ImageEffects | Image Effects]] 等）

Shader programs は Cg / HLSL 言語で書かれています。シェーダーテキストの中に[[SL-Pass|Pass]] コマンドの中に「スニペット」が埋め込まれます。だいたい以下のような感じになります：

  Pass {
      ''// ... いつものパスステートの設定 ...''
      
      __CGPROGRAM__
      ''// このスニペットのためのコンパイル命令, 例えば:''
      __#pragma vertex__ vert
      __#pragma fragment__ frag
      
      ''// Cg コード''
      
      __ENDCG__
      ''// ... 残りのパスの設定 ...''
  }


!! Cg スニペット

Cg プログラムスニペットは``CGPROGRAM`` と ``ENDCG``間に書かれます。

まずは``#pragma``ステートメントで始まります。ここの命令はコンパイルするため、どんなシェーダ関数なのかを指し示しています。:
* ``#pragma vertex ''name''`` - 頂点シェーダとして定義される ''name'' という名前の関数
* ``#pragma fragment ''name''`` - Fragment シェーダとして定義される ''name'' という名前の関数
* ``#pragma geometry ''name''`` - DX10のジオメトリシェーダとして定義される ''name'' という名前の関数。このオプションは自動的に ``#pragma target 4.0`` のスイッチオンとなります。詳しくは [[#target | 下 ]] を見て下さい。
* ``#pragma hull ''name''`` - DX11のHullシェーダとして定義される ''name'' という名前の関数。このオプションは自動的に ``#pragma target 5.0`` のスイッチオンとなります。詳しくは [[#target | 下 ]] を見て下さい。
* ``#pragma domain ''name''`` - DX11のDomeinシェーダとして定義される ''name'' という名前の関数。このオプションは自動的に ``#pragma target 5.0`` のスイッチオンとなります。詳しくは [[#target | 下 ]] を見て下さい。

その他のコンパイル命令:
* ``#pragma target ''name''`` - which shader target to compile to. See [[#target | shader targets]] for details.
* ``#pragma only_renderers ''space separated names''`` - compile shader only for given renderers. By default shaders are compiled for all renderers. See [[#renderers | renderers]] for details.
* ``#pragma exclude_renderers ''space separated names''`` - do not compile shader for given renderers. By default shaders are compiled for all renderers. See [[#renderers | renderers]] for details.
* ``#pragma glsl`` - when compiling shaders for desktop OpenGL platforms, convert Cg/HLSL into GLSL (instead of default setting which is ARB vertex/fragment programs). Use this to enable derivative instructions, texture sampling with explicit LOD levels, etc.
* ``#pragma glsl_no_auto_normalization`` - when compiling shaders for mobile GLSL (iOS/Android), turn off automatic normalization of normal & tangent vectors. By default, normals and tangents are normalized in the vertex shader on iOS/Android platforms.
* ``#pragma fragmentoption ''option''`` - adds ''option'' to the compiled OpenGL fragment program. See the [[http://www.opengl.org/registry/specs/ARB/fragment_program.txt | ARB fragment program]] specification for a list of allowed options. This directive has no effect on vertex programs or programs that are compiled to non-OpenGL targets.

Each snippet must contain a vertex program, a fragment program, or both. Thus a ``#pragma vertex`` or ``#pragma fragment`` directive is required, or both.

[[#target]]
!! Shader targets

By default, Unity compiles shaders into roughly shader model 2.0 equivalent. Using ``#pragma target`` allows shaders to be compiled into other capability levels. Currently these targets are supported:
* ``#pragma target 2.0`` ''(default)'' - roughly shader model 2.0
** Shader Model 2.0 on Direct3D 9.
** [[http://www.opengl.org/registry/specs/ARB/vertex_program.txt | ARB_vertex_program]] with 256 instruction limit and [[http://www.opengl.org/registry/specs/ARB/fragment_program.txt | ARB_fragment_program]] with 96 instruction limit (32 texture + 64 arithmetic), 16 temporary registers and 4 texture indirections.
* ``#pragma target 3.0`` - compile to shader model 3.0:
** Shader Model 3.0 on Direct3D 9.
** ARB_vertex_program with no instruction limit and ARB_fragment_program with 1024 instruction limit (512 texture + 512 arithmetic), 32 temporary registers and 4 texture indirections. It is possible to override these limits using ``#pragma profileoption`` directive. E.g. @@#pragma profileoption MaxTexIndirections=256@@ raises texture indirections limit to 256. Note that some shader model 3.0 features, like derivative instructions, aren't supported by ARB_vertex_program/ARB_fragment_program. You can use ``#pragma glsl`` to translate to GLSL instead which has fewer restrictions.
  When compiling to 3.0 or larger target, both vertex and fragment programs need to be present.
* ``#pragma target 4.0`` - compile to DX10 shader model 4.0. This target is currently only supported by DirectX 11 renderer.
* ``#pragma target 5.0`` - compile to DX11 shader model 5.0. This target is currently only supported by DirectX 11 renderer.


[[#renderers]]
!! Rendering platforms

Unity supports several rendering APIs (e.g. Direct3D 9 and OpenGL), and by default all shader programs are compiled into for supported renderers. You can indicate which renderers to compile to using ``#pragma only_renderers`` or ``#pragma exclude_renderers`` directives. This is useful if you know you will only target Mac OS X (where there's no Direct3D), or only Windows (where Unity defaults to D3D), or if some particular shader is only possible in one renderer and not others. Currently supported renderer names are:
* ``d3d9`` - Direct3D 9.
* ``d3d11`` - Direct3D 11.
* ``opengl`` - OpenGL.
* ``gles`` - OpenGL ES 2.0.
* ``xbox360`` - Xbox 360.
* ``ps3`` - PlayStation 3.
* ``flash`` - Flash.

For example, this line would only compile shader into D3D9 mode:
  #pragma only_renderers d3d9


!! Subsections

(:tocportion:)
