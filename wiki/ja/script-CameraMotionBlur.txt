! Camera Motion Blur

$$Motion Blur$$はカメラシステムの"光"が時間をかけて集積される（離散的なスナップショットをとるだけではない）事実をシミュレートした一般的なエフェクトです。速いカメラや物体の動きは、ぼやけたイメージを生成します。

Attach:MbReconstructionBlurExample.png\\
カメラが横に移動している標準的なカメラのMotion Blurの''例。また、背景領域が前景領域ほどをぼやけないという、Motion Blurの典型的な副作用に注目してください。

現在のMotion Blurの実装では、特定の層を（特に、それらのカメラの動きをフォローしている場合に、キャラクターと動的オブジェクトを除く場合に便利）を除外するオプションを使用してカメラの動きによるブレをサポートしています。しかし追加のスクリプトを用意して、各オブジェクトモデルのマトリクスを保持して速度バッファを更新すれば場合、動的なオブジェクトをサポートするように拡張することができます。

Attach:MotionBlurExamplePassion.png\\
動的オブジェクト（ドラム缶、バス）を除したCamera Motion Blurの例

その他の [[comp-ImageEffects|image effects]] 同様、この効果は Unity Pro 専用です。 必ず、[[HOWTO-InstallStandardAssets|Pro Standard Assets]] をインストールしてください。

!! プロパティ
||PROPS
||``Technique`` ||Motion Blurのアルゴリズム。通常は$$Reconstruction$$フィルタにより最高の品質が得られパフォーマンスが犠牲となり、[[DirectX11]] 対応のグラフィックスデバイスが使用されない限り、Blur（ぼかし）の半径は10ピクセルに限られます。||
||``Velocity Scale`` ||より高いScaleにすることで、画像をぼかしやすくなります。||
||``Velocity Max`` |||Blur（ぼかし）が行われる最大ピクセル距離およびReconstructionフィルタのタイルサイズ（下記参照）。||
||``Velocity Min`` |||Blur（ぼかし）が完全におこなわれない最小のピクセル距離。||

||``Camera Motion`` のプロパティ:||

||``Camera Rotation`` ||カメラの回転によるBlur（ぼけ）のScale強度。||
||``Camera Movement`` ||カメラの移動によるBlur（ぼけ）のScale強度。||

||``Local Blur``、 ``Reconstruction`` および ``ReconstructionDX11`` のプロパティ:||

||``Exclude layers`` ||このレイヤー内のオブジェクトは影響を受けません。||
||``Velocity downsample`` ||速度バッファを低解像度にすることで、パフォーマンスが向上するものの、著しくBlur（ぼかし）ーの品質が低下します。単純なシーンでは有効なオプションかもしれません。||
||``Sampler Jitter`` ||ノイズを追加すると$$Reconstruction$$フィルタによるゴーストの発生を防止するのに役立ちます。||
||``Max Sample Count`` ||ぼかしを決定するために使用されるサンプルの数。パフォーマンスに大きく影響を与えます。||

||``Preview (Scale)`` ||人為的にカメラモーションの値を設定したことでみえるBlur（ぼかし）をプレビューします。||

!! Motion Blurフィルタ（テクニック）

$$Local Blur$$は、現在のピクセル速度に沿って指向性Blur（ぼかし）を実行します。本質的に''gather''(収集)操作であるため、幾何学的に単純（例えば広大なTerrain地形）であるとき、大きなBlur（ぼかし）半径のときなど、リアリティがそれほど重要でないとシーンに適しています。一つの欠点は、フォーカスを絞った背景領域にBlur（ぼかし）されたオブジェクト適切に重ねることができないということです。もう一つの欠点は除外オブジェクトがBlur（ぼかし）された領域を汚すことです。

Attach:LocalBlurExample2.png\\
カメラが横向きに移動していて、前景（上）または背景をが除外対象である場合の``Local Blur``テクニックの例。さきに述べた物体の両方に適用され、一般に画質劣化が起きることに注意してください。実際に使用するケースでこのことが大きな問題でない場合は、このMotion Blurテクニックが迅速かつ効果的なオプションです。

$$Reconstruction$$フィルタは、より現実的なBlur（ぼかし）を生むことができます。Reconstrution（再構築）という名前の由来は、指定された色と深度バッファで利用可能な情報がない場合でも、フィルタが、背景を推定しようとすることに由来しています。結果としては、収集フィルターがより高い品質を生みLocal Blurの欠点を回避することがあります（例えば適正なオーバーラップを生成する、など）。

機能は''A Reconstruction Filter for Plausible Motion Blur''（妥当なモーションブラーの再構築フィルタ）(http://graphics.cs.williams.edu/papers/MotionBlurI3D12/ )の論文にもとづいてます。 アルゴリズムは、``Velocity Max``の大きさのタイルに画像を分割しその領域の最大速度を用いてぼやけたピクセルを近くの領域に散乱するシミュレーションを行います。前述のタイルのサイズが大きく、速度変化が激しい場合、画像の乱れが発生する可能性があります。

[[DirectX11]] の排他フィルタ`` ReconstructionDX11 ``は任意のBlur（ぼかし）の距離（別名タイルサイズや``Velocity Max``）とサンプルの数を柔軟に設定できます。

Attach:ReconstructionExample2.png\\
カメラが横に移動している間にReconstructionテクニックを使用している例。今度は、Reconstrucionフィルタが問題を解消してくれるために前述の画像の乱れが少ない（背景を除外して立方体が重なったとき（下）、あるいれは除外されたキューブがBlur（ぼかし）された背景の領域を汚さない）。

上記のすべてのフィルタが速度バッファを生成する際にPre-passが必要である一方で、$$Camera Motion$$フィルターは、単にカメラの動きのみで動作します。カメラの変化に基づいてグローバルフィルタ方向を生成したうえで、その方向に沿って画面をBlur（ぼかし）します。（詳細についてはhttp://www.valvesoftware.com/publications/2008/GDC2008_PostProcessingInTheOrangeBox.pdf を参照してください）??
これは、特にFPSゲームで、例えば高速カメラの回転を滑らかにするのに適しています。

Attach:CameraMotionBlurExample.png\\
``Camera Motion``テクニックを使用した例。Blur（ぼかし）が、画面全体に均一であることに注意してください。

(:include imagefx-SM3Depth:)
