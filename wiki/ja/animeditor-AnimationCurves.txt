! アニメーションカーブの活用（旧バージョン）

!! プロパティリスト

$$Animation Clip$$ではあらゆるアニメーション化できるプロパティは$$Animation Curve$$を保持することが出来ます、すなわちAnimation Clipでそのプロパティを制御できます。$$Animation View$$のプロパティリストで、$$Animation Curves$$をもったプロパティは色つきのカーブインジケータがあります。アニメーションプロパティにカーブを追加する方法については、[[animeditor-UsingAnimationEditor|Using the Animation View]] のセクションを参照してください。

$$Game Object$$はかなりの数のコンポーネントおよびプロパティリストを持つことが出来るため、$$Animation View$$のプロパティリストもとても長くなることがあります。$$Animation Curves$$をもつプロパティのみ表示するためには$$Animation View$$の左下にあるボタンをクリックし状態を^^Show: Animated^^にします。

Attach:AnimationEditorShowAnimatedPP.png\\
''左下にあるトグルボタンを^^Show: Animated^^にセットしてプロパティリストのなかで$$Animation Curves$$を持たないプロパティを隠します。''


!! カーブ、キー、キーフレームを理解する

$$Animation Curve$$には複数のキー（$$keys$$）があり、カーブが通過するポイントを制御できます。 これらは$$Curve Editor$$上の小さな菱形の記号で表現される。ひとつか複数かのキー（$$key$$）を持つフレームは、キーフレーム（$$keyframe$$）と呼ばれています。キーフレーム（$$keyframes$$）は白い菱形の記号として ^^Keyframe Line^^に表示されます。

あるプロパティが現在プレビューしているフレームにキー（$$key$$）を持つ場合、カーブのインジケータは菱形になります。

Attach:AnimationEditorDetailPP.png\\
''^^Rotation.y^^プロパティが現在プレビューしているフレームでキー（$$key$$）を持っています。 ^^Keyframe Line^^は全てのキーフレーム（$$keyframes$$ ）をマーキングします。

^^Keyframe Line^^は表示されているカーブのみのキーフレームを表示します。プロパティリストでプロパティが選択されている場合はそのプロパティのみが表示され、そして^^Keyframe Line^^は表示されていないカーブのキーをマーキングしません。


Attach:AnimationEditorSimpleSingleCurve.png\\
''プロパティが選択されている場合、他のプロパティは表示されず、そのカーブのキーはキーフレームライン（^^Keyframe Line^^）には表示されません^。''


!! キーフレームの追加と移動

Attach:AnimationEditorKeyframeLine.png\\
^^Keyframe Line^^は現在表示されているカーブの$$keyframes$$を表示します。^^Keyframe Line^^をダブルクリックするか、^^Keyframe button^^を使用して$$keyframe$$を追加できます。

現在プレビューしてるフレームで^^Keyframe button^^をクリックするか、$$keyframe$$を配置すべき任意のフレームで^^Keyframe Line^^をダブルクリックすることで$$keyframe$$を追加することが出来ます。
これにより一度に表示されている全てのカーブにキー（$$key$$）を追加します。キーフレーム（$$keyframe$$）を追加するには^^Keyframe Line^^を右クリックしてコンテキストメニューから^^Add Keyframe^^を選択することも出来ます。配置した後は、マウスを使って$$keyframes$$をドラッグして動かすことができます。一度に複数のキーフレーム（$$keyframes）を選択してドラッグすることも出来ます。キーフレーム（$$Keyframes$$）を削除するには、選択して^^Delete^^を押すか、その上で右クリックしてコンテキストメニューから^^Delete Keyframe^^を選択します。


!! 繰り返し再生モード（Wrap Mode）

Unityのアニメーションクリップ（$$Animation Clip$$）で様々な繰り返し再生モード（$$Wrap Mode$$）を設定し、たとえばアニメーション・クリップをループさせることができます。詳細についてはスクリプト・リファレンス[[ScriptRef:WrapMode.html| WrapMode]] を参照下さい。アニメーション・クリップの繰り返し再生モード(Wrap Mode)は、$$Animation View$$の右下の選択ボックスで設定できます。＾＾Curve View^^で選択した$$Wrap Mode$$をアニメーションクリップの時間範囲の外の白い枠線としてプレビューします。

Attach:AnimationEditorWrapmode.png\\
アニメーション・クリップ（$$Animation Clip$$）で$$Wrap Mode$$を設定すると、^^Curve View^^でプレビューします。


!! アニメーション化できるプロパティ（Supported Animatable Properties）

アニメーションビュー$$Animation View$$を使って、$$Game Object$$の単なる位置、回転、スケールよりもはるかに多くをアニメーション化することが出来ます。任意の$$Component$$や$$Material$$のプロパティはアニメーションさせることができます、それはユーザで作成したスクリプトコンポーネントのパブリック変数さえも出来ます。複雑な視覚効果や動作をもつアニメーションを作るには、関連するプロパティに$$Animation Curves$$を追加するだけです。

次のプロパティの種類で、アニメーションシステムがサポートされています：

* Float
* Color
* Vector2
* Vector3
* Vector4
* Quaternion

配列はサポートされておらず、構造体や上記以外のオブジェクトも同様です。

スクリプトコンポーネントでのBooleanは、アニメーションシステムによってサポートされていませんが、特定の内臓コンポーネントではサポートされています。それらのBooleanについては、^^0^^の値は^^False^^と等しく、それ以外の値は^^True^^と等しくなります。

次は、$$Animation View$$を使用できる多様なことの中のひとつの例です：

* ``Light`の``Color``、``Intensity``をアニメーション化し、点滅、ちらつき、脈動させます。
* ループ再生中の``Audio Source``の``Pitch``、``Volume`` をアニメーション化して、風の吹く音、エンジン音、水の流れる音を再現しつつサウンドアセットの容量を最小限に抑えます。
* ``Material``の``Texture Offset``をアニメーション化し、ベルトコンベヤー、線路、流れる水、特殊効果をシミュレートします。
* 複数の楕円パーティクルエミッター（``Ellipsoid Particle Emitters``）の``Emit``状態、``Velocities``をアニメーション化することで壮大な花火や噴水のディスプレイを作成します。
* ユーザ定義のスクリプトコンポーネントをアニメーション化して、時間の経過とともに動作に変化をもたせます。

$$Animation Curves$$を用いてゲームロジックを制御する場合、Unityで[[AnimationScripting#Playback | プレイバックおよびサンプリング]] している方法に注意する必要があります。


!! 回転の補間方法の種類について（Rotation Interpolation Types）

Unityでは回転は内部でクォータニオン（``Quaternions``）として表されます。クォータニオンは``.x``, ``.y``, ``.z``および ``.w``から構成されていて、一般的には、これらの使い方を熟知していないかぎりこれらの値を手動で変更しません。 その代わりに、回転は一般的にオイラー角（''Euler Angles''）で操作し、``.x``、``.y``、``.z``の値がそれぞれの3つの軸の周りの回転を表しています。

2つの回転の間を補間方法は、``Quaternion``か``Euler Angles``の値のどちらかで実行することになります。アニメーションビュー（$$Animation View$$）を使用すると、``Transform``回転をアニメーション化するときに使用する補間方法を選択することができます。しかし回転は、どの補間方法を選択しているかにかかわらず、常に``Euler Angles``の形で表示されます。

Attach:AnimationEditorQuaternionInterpolationMenu.png\\
''Transform回転は``Euler Angles``による補間あるいは``Quaternion``による補間を使用できます''

!!! クォータニオン補間（Quaternion Interpolation）

クォータニオン補間は、2つの回転の間の最短経路に沿って常に良い補間を生成します。これがジンバルロックなどの回転補間の乱れを回避することができます。しかしクォータニオン補間は180度以上の回転を表すことはできず、それは逆方向のほうが短いためです。クォータニオン補間を使用して二つのキーを180度以上離すと、実際に回転がスムーズであるにも関わらず、カーブは不連続に見えます、単純に逆方向が短いからそちらに回転しまうためです。180度より大きい回転が必要な場合は、追加のキーを間に配置する必要があります。クォータニオン補間を使用する場合、ひとつのカーブにおけるキーや接線を変更すると、他の2つのカーブも形状が変更されてしまい、それは3つのカーブ全て内部ではクォータニオンで表されているためです。クォータニオン補間を使用するときは、キーは常リンクされているため、3つのうち1つのカーブで特定のタイミングにおいてキーを作成すると、残り2つのカーブもそのタイミングでキーが作成されます。

Attach:AnimationEditorQuaternionInterpolation.png\\
クォータニオン補間を使用するとき、270度離れて二つのキーを配置していた場合は逆方向、すなわち90度、に値が補間されます。

!!! オイラー角補間（Euler Angles Interpolation）

オイラー角の補間は、ほとんどの人々が作業に慣れているものです。オイラー角は任意の大きな回転を表すことが出来、``.x``、 ``.y``、``.z``のカーブは互いに独立しています。オイラー角の補間は、複数の軸の周りを同時に回転するときに発生する、ジンバルロックなどの回転の乱れが生じるｋとがあるが、作業は直感的で一度に1つの軸の周りを回転させるのでシンプルです。オイラー角補間が使用されている場合、Unityは内部で内部的に使用しているクォータニオン表現にカーブの焼き込みを行っています。これは、外部のプログラムからUnityにアニメーションをインポートするときに起こることに似ています。このカーブの焼き込みは処理過程で余分なキーを追加する可能性があり、接線の種類が^^Constant^^の場合、サブフレームのレベルでは完全には正確でない場合があることに留意下さい。
