! サーフェスシェーダの例

[[SL-SurfaceShaders | $$Surface Shaders$$]] の例です。 以下の例は、組み込みライティング モデルの使用に集中しています。カスタムのライティング モデルの実装方法については、[[SL-SurfaceShaderLightingExamples | Surface Shader Lighting Examples]] にあります。

!! 簡単 

非常に基本的なシェーダとその作成から始めましょう。 以下は、表面の色を''白''にするだけのシェーダです。 これは、組み込み Lambert (デフューズ) ライティング モデルを使用します。


  Shader "Example/Diffuse Simple" {
    SubShader {
      Tags { "RenderType" = "Opaque" }
      CGPROGRAM
      #pragma surface surf Lambert
      struct Input {
          float4 color : COLOR;
      };
      void surf (Input IN, inout SurfaceOutput o) {
          o.Albedo = 1;
      }
      ENDCG
    }
    Fallback "Diffuse"
  }

以下は、2 つの [[class-Light | lights]] が設定されたモデルでどのように見えるかです。 \\
Attach:SurfaceShaderSimple.png

!! テクスチャ

真っ白なオブジェクトはかなりつまらないので、テクスチャを追加しましょう。 [[SL-Properties | Properties block]] をこのシェーダに追加するので、マテリアルからテクスチャ セレクタを取得します。 その他の変更は以下に太字で記載されています。

  Shader "Example/Diffuse Texture" {
    __Properties {__
      ___MainTex ("Texture", 2D) = "white" {}__
    __}__
    SubShader {
      Tags { "RenderType" = "Opaque" }
      CGPROGRAM
      #pragma surface surf Lambert
      struct Input {
          __float2 uv_MainTex;__
      };
      __sampler2D _MainTex;__
      void surf (Input IN, inout SurfaceOutput o) {
          o.Albedo = __tex2D (_MainTex, IN.uv_MainTex).rgb__;
      }
      ENDCG
    } 
    Fallback "Diffuse"
  }

Attach:SurfaceShaderDiffuseTex.png

!! 法線マッピング

法線マッピングを追加しましょう。

  Shader "Example/Diffuse Bump" {
    Properties {
      _MainTex ("Texture", 2D) = "white" { }
      ___BumpMap ("Bumpmap", 2D) = "bump" {}__
    }
    SubShader {
      Tags { "RenderType" = "Opaque" }
      CGPROGRAM
      #pragma surface surf Lambert
      struct Input {
        float2 uv_MainTex;
        float2 uv_BumpMap;
      };
      sampler2D _MainTex;
      __sampler2D _BumpMap;__
      void surf (Input IN, inout SurfaceOutput o) {
        o.Albedo = tex2D (_MainTex, IN.uv_MainTex).rgb;
        __o.Normal = UnpackNormal (tex2D (_BumpMap, IN.uv_BumpMap));__
      }
      ENDCG
    } 
    Fallback "Diffuse"
  }

Attach:SurfaceShaderDiffuseBump.png


!! リム ライティング

今度は、リム ライティングを追加して、オブジェクトの縁をハイライトします。 表面の法線とビュー方向間の角度に基づいて、放射光を追加します。 そのため、@@viewDir@@ 組み込みサーフェスシェーダ変数を使用します。

  Shader "Example/Rim" {
    Properties {
      _MainTex ("Texture", 2D) = "white" { }
      _BumpMap ("Bumpmap", 2D) = "bump" {}
      ___RimColor ("Rim Color", Color) = (0.26,0.19,0.16,0.0)__
      ___RimPower ("Rim Power", Range(0.5,8.0)) = 3.0__
    }
    SubShader {
      Tags { "RenderType" = "Opaque" }
      CGPROGRAM
      #pragma surface surf Lambert
      struct Input {
          float2 uv_MainTex;
          float2 uv_BumpMap;
          __float3 viewDir;__
      };
      sampler2D _MainTex;
      sampler2D _BumpMap;
      __float4 _RimColor;__
      __float _RimPower;__
      void surf (Input IN, inout SurfaceOutput o) {
          o.Albedo = tex2D (_MainTex, IN.uv_MainTex).rgb;
          o.Normal = UnpackNormal (tex2D (_BumpMap, IN.uv_BumpMap));
          __half rim = 1.0 - saturate(dot (normalize(IN.viewDir), o.Normal));__
          __o.Emission = _RimColor.rgb * pow (rim, _RimPower);__
      }
      ENDCG
    } 
    Fallback "Diffuse"
  }

Attach:SurfaceShaderRim.png


!! 細部テクスチャ

異なる効果を与えるため、ベース テクスチャと結合する細部テクスチャを追加しましょう。 細部テクスチャは、同じ UV。 を使用しますが、通常、マテリアルでのタイリングが異なるため、異なる入力 UV 座標を使用する必要があります。

  Shader "Example/Detail" {
    Properties {
      _MainTex ("Texture", 2D) = "white" { }
      _BumpMap ("Bumpmap", 2D) = "bump" {}
      ___Detail ("Detail", 2D) = "gray" {}__
    }
    SubShader {
      Tags { "RenderType" = "Opaque" }
      CGPROGRAM
      #pragma surface surf Lambert
      struct Input {
          float2 uv_MainTex;
          float2 uv_BumpMap;
          __float2 uv_Detail;__
      };
      sampler2D _MainTex;
      sampler2D _BumpMap;
      __sampler2D _Detail;__
      void surf (Input IN, inout SurfaceOutput o) {
          o.Albedo = tex2D (_MainTex, IN.uv_MainTex).rgb;
          __o.Albedo *= tex2D (_Detail, IN.uv_Detail).rgb * 2;__
          o.Normal = UnpackNormal (tex2D (_BumpMap, IN.uv_BumpMap));
      }
      ENDCG
    } 
    Fallback "Diffuse"
  }

チェッカー テクスチャを使用してもあまり意味はありませんが、何が起こるかが分かります。 \\
Attach:SurfaceShaderDetailTex.png


!! 画面空間内の細部テクスチャ

画面空間での細部テクスチャはどうなりますか? 兵士の頭部モデルにはあまり意味はありませんが、組み込み @@screenPos@@ 入力がどのように使用されるかが分かります。

  Shader "Example/ScreenPos" {
    Properties {
      _MainTex ("Texture", 2D) = "white" { }
      _Detail ("Detail", 2D) = "gray" {}
    }
    SubShader {
      Tags { "RenderType" = "Opaque" }
      CGPROGRAM
      #pragma surface surf Lambert
      struct Input {
          float2 uv_MainTex;
          __float4 screenPos;__
      };
      sampler2D _MainTex;
      sampler2D _Detail;
      void surf (Input IN, inout SurfaceOutput o) {
          o.Albedo = tex2D (_MainTex, IN.uv_MainTex).rgb;
          __float2 screenUV = IN.screenPos.xy / IN.screenPos.w;__
          __screenUV *= float2(8,6);__
          __o.Albedo *= tex2D (_Detail, screenUV).rgb * 2;__
      }
      ENDCG
    } 
    Fallback "Diffuse"
  }

短くするために、上記シェーダから法線マッピングを削除しました。 \\
Attach:SurfaceShaderDetailTexScreenPos.png


!! キューブマップ反射

以下は組み込み @@worldRefl@@ 入力を使用してキューブマッピング反射を行うシェーダです。 組み込みの反射/デフューズ シェーダを使うのと実際非常に似ています。

  Shader "Example/WorldRefl" {
    Properties {
      _MainTex ("Texture", 2D) = "white" { }
      ___Cube ("Cubemap", CUBE) = "" {}__
    }
    SubShader {
      Tags { "RenderType" = "Opaque" }
      CGPROGRAM
      #pragma surface surf Lambert
      struct Input {
          float2 uv_MainTex;
          __float3 worldRefl;__
      };
      sampler2D _MainTex;
      __samplerCUBE _Cube;__
      void surf (Input IN, inout SurfaceOutput o) {
          o.Albedo = tex2D (_MainTex, IN.uv_MainTex).rgb * 0.5;
          __o.Emission = texCUBE (_Cube, IN.worldRefl).rgb;__
      }
      ENDCG
    } 
    Fallback "Diffuse"
  }

放出として反射色を割り当てるので、非常に輝いた兵士が得られます。 \\
Attach:SurfaceShaderWorldRefl.png


法線マップに影響される反射を行たい場合、わずかに関与させる必要があります。 @@INTERNAL_DATA@@ を入力構造に追加し、@@WorldReflectionVector@@ 関数を、法線出力記述後にピクセルごとの反射ベクトルを計算するために使用する必要があります。

  Shader "Example/WorldRefl Normalmap" {
    Properties {
      _MainTex ("Texture", 2D) = "white" { }
      _BumpMap ("Bumpmap", 2D) = "bump" {}
      _Cube ("Cubemap", CUBE) = "" {}
    }
    SubShader {
      Tags { "RenderType" = "Opaque" }
      CGPROGRAM
      #pragma surface surf Lambert
      struct Input {
          float2 uv_MainTex;
          float2 uv_BumpMap;
          float3 worldRefl;
          __INTERNAL_DATA__
      };
      sampler2D _MainTex;
      sampler2D _BumpMap;
      samplerCUBE _Cube;
      void surf (Input IN, inout SurfaceOutput o) {
          o.Albedo = tex2D (_MainTex, IN.uv_MainTex).rgb * 0.5;
          o.Normal = UnpackNormal (tex2D (_BumpMap, IN.uv_BumpMap));
          o.Emission = texCUBE (_Cube, __WorldReflectionVector (IN, o.Normal)__).rgb;
      }
      ENDCG
    } 
    Fallback "Diffuse"
  }

これは、法線マッピングされた輝いている兵士です。 \\
Attach:SurfaceShaderWorldReflNormalmap.png


!! 世界空間の位置を介したスライス

以下は、ほぼ水平の輪の中のピクセルを破棄することで、オブジェクトを''スライス''するシェーダです。 これは、ピクセルの世界での位置に基づいて、@@clip()@@ Cg/HLSL 関数を使用して行います。 @@worldPos@@ 組み込みサーフェスシェーダ変数を使用します。

  Shader "Example/Slices" {
    Properties {
      _MainTex ("Texture", 2D) = "white" { }
      _BumpMap ("Bumpmap", 2D) = "bump" {}
    }
    SubShader {
      Tags { "RenderType" = "Opaque" }
      __Cull Off__
      CGPROGRAM
      #pragma surface surf Lambert
      struct Input {
          float2 uv_MainTex;
          float2 uv_BumpMap;
          __float3 worldPos;__
      };
      sampler2D _MainTex;
      sampler2D _BumpMap;
      void surf (Input IN, inout SurfaceOutput o) {
          __clip (frac((IN.worldPos.y+IN.worldPos.z*0.1) * 5) - 0.5);__
          o.Albedo = tex2D (_MainTex, IN.uv_MainTex).rgb;
          o.Normal = UnpackNormal (tex2D (_BumpMap, IN.uv_BumpMap));
      }
      ENDCG
    } 
    Fallback "Diffuse"
  }

Attach:SurfaceShaderSlices.png



!! 頂点修飾子のある法線押し出し

頂点シェーダで入ってくる頂点データを修正する''vertex modifier''関数を使用することができます。 これは、手続き型アニメーションや法線に沿った押し出しなどに使用できます。 このため、サーフェスシェーダ コンパイル ディレクティブ @@vertex:functionName@@ が使用されますが、これは、@@inout appdata_full@@ パラメータを取る関数です。

以下は、マテリアルで指定した量だけ法線に沿って頂点を動かすシェーダです。

  Shader "Example/Normal Extrusion" {
    Properties {
      _MainTex ("Texture", 2D) = "white" { }
      ___Amount ("Extrusion Amount", Range(-1,1)) = 0.5__
    }
    SubShader {
      Tags { "RenderType" = "Opaque" }
      CGPROGRAM
      #pragma surface surf Lambert __vertex:vert__
      struct Input {
          float2 uv_MainTex;
      };
      __float _Amount;__
      __void vert (inout appdata_full v) {__
          __v.vertex.xyz += v.normal * _Amount;__
      __}__
      sampler2D _MainTex;
      void surf (Input IN, inout SurfaceOutput o) {
          o.Albedo = tex2D (_MainTex, IN.uv_MainTex).rgb;
      }
      ENDCG
    } 
    Fallback "Diffuse"
  }

法線に沿って頂点を動かすことで、兵士が太った外見になります。 \\
Attach:SurfaceShaderNormalExtrusion.png



!! 頂点ごとに計算されたカスタムのデータ

頂点修飾子関数を使用すると、頂点シェーダ内のカスタムのデータを計算でき、これが、ピクセルごとにサーフェスシェーダ関数に渡されます。 同じコンパイル ディレクティブ @@vertex:functionName@@ が使用されますが、この関数は、 @@inout appdata_full@@ @@out Input@@ の 2 つのパラメータを摂る必要があります。 ここで組み込み値ではない入力メンバーを記入できます。

下の例では、カスタムの　@@float3 customColor@@ メンバーを定義しますが、これは、頂点関数で計算されます。

  Shader "Example/Custom Vertex Data" {
    Properties {
      _MainTex ("Texture", 2D) = "white" {}
    }
    SubShader {
      Tags { "RenderType" = "Opaque" }
      CGPROGRAM
      #pragma surface surf Lambert __vertex:vert__
      struct Input {
          float2 uv_MainTex;
          __float3 customColor;__
      };
      void vert (inout appdata_full v, __out Input o__) {
          __UNITY_INITIALIZE_OUTPUT(Input,o);__
          __o.customColor = abs(v.normal);__
      }
      sampler2D _MainTex;
      void surf (Input IN, inout SurfaceOutput o) {
          o.Albedo = tex2D (_MainTex, IN.uv_MainTex).rgb;
          __o.Albedo *= IN.customColor;__
      }
      ENDCG
    } 
    Fallback "Diffuse"
  }

この例では、@@customColor@@ が、法線の絶対値に設定されます。 \\
Attach:SurfaceShaderCustomVertexData.png

より実践的な使用により、組み込み入力変数では提供していない頂点ごとのデータが計算されるか、シェーダの計算が最適化されます。 例えば、ピクセルごとにサーフェスシェーダで計算する代わりに、オブジェクトの頂点でリム ライティングを計算することができます。


!! 最終色モディファイア

"final color modifier"関数を使うと、シェーダで最終段階の色を計算して適応できます。 @@finalcolor:functionName@@ で指定されたサーフェスシェーダはそのために使います。そこでは @@Input IN, SurfaceOutput o, inout fixed4 color@@ パラメータを使います。

以下は最終色モディファイアの簡単なシェーダです。これは表面アルベドカラーに違う色を適応しています。この色はライトマップやライトプローブなどから持ってきたどんな色でも影響される色です。

  Shader "Example/Tint Final Color" {
    Properties {
      _MainTex ("Texture", 2D) = "white" {}
      ___ColorTint ("Tint", Color) = (1.0, 0.6, 0.6, 1.0)__
    }
    SubShader {
      Tags { "RenderType" = "Opaque" }
      CGPROGRAM
      #pragma surface surf Lambert __finalcolor:mycolor__
      struct Input {
          float2 uv_MainTex;
      };
      __fixed4 _ColorTint;__
      __void mycolor (Input IN, SurfaceOutput o, inout fixed4 color)__
      {
          __color *= _ColorTint;__
      }
      sampler2D _MainTex;
      void surf (Input IN, inout SurfaceOutput o) {
           o.Albedo = tex2D (_MainTex, IN.uv_MainTex).rgb;
      }
      ENDCG
    } 
    Fallback "Diffuse"
  }


Attach:SurfaceShaderFinalColorSimple.png


!! 最終色モディファイアを使ったカスタムフォグ

上の最終色モディファイアを使ったよくあるケースとして、カスタムフォグの実装があります。フォグは最後にコピュートシェーダで影響しなければいけません。つまり、まさに @@finalcolor@@ モディファイアが行うのです。

これはスクリーンの中心からの距離に応じたフォグ色を適応したシェーダの例です。これはカスタム頂点データ（ @@fog@@ ）頂点モディファイアと最終色モディファイアが組合わさっています。フォワードレンダリングの加算パスを使うときは、フォグは黒色にフェードする必要があります。この例では、@@UNITY_PASS_FORWARDADD@@ のチェックと同様にことをしています。

  Shader "Example/Fog via Final Color" {
    Properties {
      _MainTex ("Texture", 2D) = "white" {}
      ___FogColor ("Fog Color", Color) = (0.3, 0.4, 0.7, 1.0)__
    }
    SubShader {
      Tags { "RenderType" = "Opaque" }
      CGPROGRAM
      #pragma surface surf Lambert __finalcolor:mycolor vertex:myvert__
      struct Input {
          float2 uv_MainTex;
          __half fog;__
      };
      void myvert (inout appdata_full v, out Input data)
      {
          __UNITY_INITIALIZE_OUTPUT(Input,v);__
          __float4 hpos = mul (UNITY_MATRIX_MVP, v.vertex);__
          __data.fog = min (1, dot (hpos.xy, hpos.xy) * 0.1);__
      }
      fixed4 _FogColor;
      void mycolor (Input IN, SurfaceOutput o, inout fixed4 color)
      {
          __fixed3 fogColor = _FogColor.rgb;__
          __#ifdef UNITY_PASS_FORWARDADD__
          __fogColor = 0;__
          __#endif__
          __color.rgb = lerp (color.rgb, fogColor, IN.fog);__
      }
      sampler2D _MainTex;
      void surf (Input IN, inout SurfaceOutput o) {
           o.Albedo = tex2D (_MainTex, IN.uv_MainTex).rgb;
      }
      ENDCG
    } 
    Fallback "Diffuse"
  }


Attach:SurfaceShaderFinalColorFog.png
